#!/usr/bin/env python3
"""
Pruebas completas del Sistema LCLN mejorado
"""

from sistema_lcln_simple import sistema_lcln_simple

def probar_casos_mejorados():
    print("üß™ === PRUEBAS SISTEMA LCLN MEJORADO ===\n")
    
    casos_prueba = [
        # Caso 1: B√∫squeda de lim√≥n (mejorado)
        {
            'consulta': 'limon',
            'descripcion': 'B√∫squeda m√∫ltiple de lim√≥n (antes: 1, ahora: 4)'
        },
        # Caso 2: B√∫squeda sem√°ntica mejorada
        {
            'consulta': 'bebidas sin azucar',
            'descripcion': 'B√∫squeda sem√°ntica: bebidas + atributo (debe encontrar 2 productos)'
        },
        # Caso 3: B√∫squeda con filtro precio
        {
            'consulta': 'snacks dulces barato',
            'descripcion': 'B√∫squeda con filtro sem√°ntico de precio'
        },
        # Caso 4: Prueba AFD vs Fallback
        {
            'consulta': 'coca cola',
            'descripcion': 'Producto com√∫n (AFD vs Fallback)'
        },
        # Caso 5: B√∫squeda por palabra clave sem√°ntica
        {
            'consulta': 'chocolate',
            'descripcion': 'B√∫squeda sem√°ntica por ingrediente'
        },
        # Caso 6: Categor√≠a + atributo
        {
            'consulta': 'snacks picantes',
            'descripcion': 'Categor√≠a + atributo espec√≠fico'
        }
    ]
    
    for i, caso in enumerate(casos_prueba, 1):
        print(f"üîç **CASO {i}: {caso['descripcion']}**")
        print(f"   Consulta: '{caso['consulta']}'")
        
        resultado = sistema_lcln_simple.buscar_productos_inteligente(caso['consulta'])
        
        print(f"   üìä Resultados:")
        print(f"      ‚Ä¢ Productos encontrados: {resultado['products_found']}")
        print(f"      ‚Ä¢ Estrategia: {resultado['interpretation']['estrategia_usada']}")
        print(f"      ‚Ä¢ Tiempo: {resultado['processing_time_ms']:.1f}ms")
        print(f"      ‚Ä¢ Mensaje: {resultado['user_message']}")
        
        if resultado['products_found'] > 0:
            print(f"   üè∑Ô∏è  Productos:")
            for j, prod in enumerate(resultado['recommendations'][:3], 1):  # Mostrar top 3
                print(f"      {j}. {prod['nombre']} - ${prod['precio']} ({prod['categoria']})")
            if resultado['products_found'] > 3:
                print(f"      ... y {resultado['products_found'] - 3} m√°s")
        else:
            print(f"   ‚ùå No se encontraron productos")
        
        print()  # L√≠nea en blanco
    
    print("‚úÖ **RESUMEN DE MEJORAS IMPLEMENTADAS:**")
    print("   1. üéØ B√∫squeda m√∫ltiple para palabras simples (ej: 'lim√≥n' ‚Üí 4 productos)")
    print("   2. üß† B√∫squeda sem√°ntica mejorada (categor√≠a + atributo)")
    print("   3. üí∞ Filtros de precio m√°s inteligentes")
    print("   4. üîç Coincidencias por sin√≥nimos m√°s flexibles")
    print("   5. üìä Mejor informaci√≥n de debug del AFD")
    print("   6. üí¨ Mensajes de usuario m√°s descriptivos")

def estadisticas_sistema():
    print("\nüìà === ESTAD√çSTICAS DEL SISTEMA ===")
    
    # Forzar actualizaci√≥n de cache
    sistema_lcln_simple._actualizar_cache_dinamico()
    
    print(f"üóÇÔ∏è  **Base de Datos MySQL:**")
    print(f"   ‚Ä¢ Total productos: {len(sistema_lcln_simple._cache_productos)}")
    print(f"   ‚Ä¢ Total categor√≠as: {len(sistema_lcln_simple._cache_categorias)}")
    print(f"   ‚Ä¢ Total sin√≥nimos: {len(sistema_lcln_simple._cache_sinonimos)}")
    
    print(f"\nüß† **Analizador L√©xico (AFD):**")
    productos_completos = sum(1 for nombre in sistema_lcln_simple._cache_productos.keys() if len(nombre.split()) >= 3)
    productos_multi = sum(1 for nombre in sistema_lcln_simple._cache_productos.keys() if len(nombre.split()) == 2)
    productos_simples = len(sistema_lcln_simple._cache_productos) - productos_completos - productos_multi
    
    print(f"   ‚Ä¢ Productos complejos (‚â•3 palabras): {productos_completos}")
    print(f"   ‚Ä¢ Productos multi-palabra (2 palabras): {productos_multi}")
    print(f"   ‚Ä¢ Productos simples (1 palabra): {productos_simples}")
    
    # An√°lisis de categor√≠as
    categorias_conteo = {}
    for prod in sistema_lcln_simple._cache_productos.values():
        cat = prod['categoria']
        categorias_conteo[cat] = categorias_conteo.get(cat, 0) + 1
    
    print(f"\nüì¶ **Distribuci√≥n por Categor√≠as:**")
    for categoria, count in sorted(categorias_conteo.items(), key=lambda x: x[1], reverse=True):
        print(f"   ‚Ä¢ {categoria}: {count} productos")

if __name__ == "__main__":
    estadisticas_sistema()
    probar_casos_mejorados()
