# main_simple.py - Buscador simple LYNX
import json
from datetime import datetime
from utilidades import ConfiguracionLYNX
from analizador_lexico import AnalizadorLexicoLYNX

def main():
    """Sistema de b√∫squeda LYNX - Buscador de productos en lenguaje natural"""
    print("=== BUSCADOR LYNX ===")
    print("Busca productos usando lenguaje natural")
    print("Ejemplos: 'botana barata', 'bebidas sin az√∫car', 'productos menos de 50 pesos'")
    print()
    
    # Inicializar configuraci√≥n y analizador
    print("Iniciando sistema...")
    configuracion = ConfiguracionLYNX()
    analizador = AnalizadorLexicoLYNX(configuracion)
    
    print("‚úì Sistema listo para b√∫squedas")
    print()
    
    # Mostrar comandos disponibles
    mostrar_ayuda()
    
    # Bucle principal de b√∫squeda
    while True:
        try:
            consulta = input("\nüîç Buscar: ").strip()
            
            # Verificar comandos especiales
            if not consulta:
                continue
            elif consulta.lower() in ['salir', 'quit', 'exit']:
                print("¬°Hasta luego!")
                break
            elif consulta.lower() in ['ayuda', 'help', '?']:
                mostrar_ayuda()
                continue
            elif consulta.lower() == 'ejemplos':
                mostrar_ejemplos()
                continue
            elif consulta.lower() == 'estadisticas':
                mostrar_estadisticas(configuracion)
                continue
            elif consulta.lower().startswith('agregar'):
                manejar_agregar_termino(consulta, configuracion, analizador)
                continue
            
            # Procesar b√∫squeda
            procesar_busqueda(consulta, analizador)
            
        except KeyboardInterrupt:
            print("\n¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")
            continue

def mostrar_ayuda():
    """Muestra la ayuda del sistema"""
    print("üìö COMANDOS DISPONIBLES:")
    print("  ‚Ä¢ ayuda, help, ?     - Muestra esta ayuda")
    print("  ‚Ä¢ ejemplos           - Muestra ejemplos de b√∫squedas")
    print("  ‚Ä¢ estadisticas       - Muestra estad√≠sticas del sistema")
    print("  ‚Ä¢ agregar <tipo> <t√©rmino> - Agrega un nuevo t√©rmino")
    print("  ‚Ä¢ salir, quit, exit  - Sale del buscador")
    print()
    print("üí° TIPOS DE B√öSQUEDA:")
    print("  ‚Ä¢ Productos: 'coca cola', 'galletas', 'leche'")
    print("  ‚Ä¢ Categor√≠as: 'bebidas', 'botanas', 'l√°cteos'")
    print("  ‚Ä¢ Filtros de precio: 'barato', 'caro', 'menor a 20'")
    print("  ‚Ä¢ Atributos: 'sin az√∫car', 'con chile', 'integral'")

def mostrar_ejemplos():
    """Muestra ejemplos de b√∫squedas"""
    ejemplos = [
        ("botana barata", "Busca snacks econ√≥micos (precio < 50)"),
        ("bebidas sin az√∫car", "Busca bebidas que no contengan az√∫car"),
        ("productos menos de 30", "Busca productos con precio menor a 30"),
        ("coca cola grande", "Busca Coca Cola de tama√±o grande"),
        ("categor√≠a frutas", "Busca en la categor√≠a de frutas"),
        ("leche deslactosada", "Busca leche sin lactosa"),
        ("galletas con chocolate", "Busca galletas que contengan chocolate"),
        ("productos entre 10 y 50", "Busca productos en ese rango de precio")
    ]
    
    print("üìù EJEMPLOS DE B√öSQUEDA:")
    for i, (consulta, descripcion) in enumerate(ejemplos, 1):
        print(f"  {i:2d}. '{consulta}' ‚Üí {descripcion}")

def mostrar_estadisticas(configuracion):
    """Muestra estad√≠sticas del sistema"""
    bd = configuracion.base_datos
    print("üìä ESTAD√çSTICAS DEL SISTEMA:")
    print(f"  ‚Ä¢ Productos simples: {len(bd.get('productos_simples', []))}")
    print(f"  ‚Ä¢ Productos multi-palabra: {len(bd.get('productos_multi', []))}")
    print(f"  ‚Ä¢ Productos completos: {len(bd.get('productos_completos', []))}")
    print(f"  ‚Ä¢ Categor√≠as: {len(bd.get('categorias', []))}")
    print(f"  ‚Ä¢ Atributos: {len(bd.get('atributos', []))}")
    print(f"  ‚Ä¢ Modificadores: {len(bd.get('modificadores', []))}")
    print(f"  ‚Ä¢ Unidades: {len(bd.get('unidades', []))}")

def manejar_agregar_termino(consulta, configuracion, analizador):
    """Maneja la adici√≥n de nuevos t√©rminos"""
    try:
        partes = consulta.split(' ', 2)
        if len(partes) < 3:
            print("‚ùå Formato: agregar <tipo> <t√©rmino>")
            print("   Tipos disponibles: producto, categoria, atributo, modificador")
            return
        
        _, tipo, termino = partes
        tipo = tipo.lower()
        termino = termino.lower()
        
        tipo_map = {
            'producto': 'productos_simples',
            'categoria': 'categorias', 
            'atributo': 'atributos',
            'modificador': 'modificadores'
        }
        
        if tipo not in tipo_map:
            print(f"‚ùå Tipo '{tipo}' no v√°lido. Tipos: {', '.join(tipo_map.keys())}")
            return
            
        categoria_bd = tipo_map[tipo]
        if configuracion.agregar_termino(categoria_bd, termino):
            print(f"‚úì '{termino}' agregado como {tipo}")
            configuracion.guardar_configuracion()
            # Reinicializar analizador con nueva configuraci√≥n
            analizador.__init__(configuracion)
        else:
            print(f"‚ö†Ô∏è '{termino}' ya existe en {tipo}")
            
    except Exception as e:
        print(f"‚ùå Error al agregar t√©rmino: {e}")

def procesar_busqueda(consulta, analizador):
    """Procesa una b√∫squeda y muestra los resultados"""
    print(f"\nüîç Procesando: '{consulta}'")
    print("‚îÄ" * 50)
    
    # An√°lisis l√©xico
    start_time = datetime.now()
    tokens = analizador.analizar(consulta)
    end_time = datetime.now()
    
    # Mostrar tokens encontrados
    print("üè∑Ô∏è  TOKENS IDENTIFICADOS:")
    if not tokens:
        print("   ‚ùå No se encontraron tokens v√°lidos")
        return
    
    for i, token in enumerate(tokens, 1):
        tipo = token['tipo']
        valor = token['valor']
        
        # Mostrar informaci√≥n adicional para tokens especiales
        if 'interpretacion' in token:
            interp = token['interpretacion']
            print(f"   {i}. {tipo}: '{valor}' ‚Üí {interp}")
        else:
            print(f"   {i}. {tipo}: '{valor}'")
    
    # Generar consulta SQL
    try:
        resultado_json = analizador.generar_json_resultado(consulta)
        resultado = json.loads(resultado_json)
        
        print("\nüí° INTERPRETACI√ìN:")
        interpretacion = resultado.get('interpretacion', {})
        
        # Mostrar productos identificados
        if interpretacion.get('productos'):
            productos = interpretacion['productos']
            print(f"   üì¶ Productos: {', '.join([p['nombre'] for p in productos])}")
        
        # Mostrar categor√≠as
        if interpretacion.get('categorias'):
            print(f"   üìÇ Categor√≠as: {', '.join(interpretacion['categorias'])}")
        
        # Mostrar filtros
        filtros = interpretacion.get('filtros', {})
        if filtros.get('precio'):
            precio = filtros['precio']
            if 'max' in precio:
                print(f"   üí∞ Precio m√°ximo: ${precio['max']}")
            if 'min' in precio:
                print(f"   üí∞ Precio m√≠nimo: ${precio['min']}")
            if 'exacto' in precio:
                print(f"   üí∞ Precio exacto: ${precio['exacto']}")
        
        if filtros.get('atributos'):
            for attr in filtros['atributos']:
                print(f"   üè∑Ô∏è  {attr['modificador'].title()} {attr['atributo']}")
        
        # Mostrar consulta SQL generada
        sql = resultado.get('sql_sugerido', '')
        if sql:
            print(f"\nüóÉÔ∏è  CONSULTA SQL:")
            print(f"   {sql}")
        
        # Mostrar tiempo de procesamiento
        tiempo = (end_time - start_time).total_seconds() * 1000
        print(f"\n‚è±Ô∏è  Procesado en {tiempo:.2f}ms")
        
    except Exception as e:
        print(f"‚ùå Error al procesar resultado: {e}")

if __name__ == "__main__":
    main()
