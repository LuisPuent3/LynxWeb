#!/usr/bin/env python3
"""
TEST DE RECOMENDACIONES - SISTEMA ESCALABLE

Prueba espec√≠fica para verificar que las recomendaciones est√©n
funcionando correctamente con el nuevo sistema de atributos inteligentes.
"""

from adaptador_escalable import SimuladorBDLynxShopEscalable
from utilidades import ConfiguracionLYNX
from analizador_lexico import AnalizadorLexicoLYNX
import json
import time

def test_busquedas_directas():
    """Probar b√∫squedas directas en el simulador escalable"""
    print("üß™ PROBANDO B√öSQUEDAS DIRECTAS EN SIMULADOR ESCALABLE")
    print("=" * 60)
    
    sim = SimuladorBDLynxShopEscalable()
    
    consultas_test = [
        "paleta dulce",
        "bebidas sin azucar",
        "productos picantes",
        "coca cola",
        "papitas sabritas",
        "chocolate",
        "dulce",
        "barato",
        "grande"
    ]
    
    for consulta in consultas_test:
        print(f"\nüîç Consultando: '{consulta}'")
        resultados = sim.buscar_por_similitud(consulta)
        
        if resultados:
            print(f"   ‚úÖ {len(resultados)} resultados encontrados:")
            for i, r in enumerate(resultados[:3], 1):
                print(f"      {i}. {r['nombre']} - ${r['precio']} (categoria: {r['categoria']})")
        else:
            print(f"   ‚ùå No se encontraron resultados")

def test_analizador_lexico():
    """Probar analizador l√©xico completo"""
    print(f"\n\nüß™ PROBANDO ANALIZADOR L√âXICO COMPLETO")
    print("=" * 60)
    
    configuracion = ConfiguracionLYNX()
    analizador = AnalizadorLexicoLYNX(configuracion)
    
    consultas_test = [
        "paleta dulce",
        "bebidas sin azucar",
        "productos picantes barato"
    ]
    
    for consulta in consultas_test:
        print(f"\nüîç Analizando: '{consulta}'")
        
        try:
            # Usar el m√©todo completo del analizador
            resultado_json = analizador.generar_json_resultado_completo(consulta)
            resultado = json.loads(resultado_json)
            
            # Mostrar interpretaci√≥n
            interpretacion = resultado.get('interpretation', {})
            print(f"   üìÇ Categor√≠a detectada: {interpretacion.get('categoria', 'No detectada')}")
            
            # Mostrar recomendaciones
            recomendaciones = resultado.get('recommendations', [])
            print(f"   üõçÔ∏è Recomendaciones: {len(recomendaciones)}")
            
            for i, rec in enumerate(recomendaciones[:3], 1):
                print(f"      {i}. {rec.get('name', 'N/A')} - ${rec.get('price', 0)} (categoria: {rec.get('category', 'N/A')})")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def test_configuracion_escalable():
    """Probar configuraci√≥n escalable directamente"""
    print(f"\n\nüß™ PROBANDO CONFIGURACI√ìN ESCALABLE")
    print("=" * 60)
    
    try:
        from adaptador_escalable import ConfiguracionLYNXEscalable
        config_escalable = ConfiguracionLYNXEscalable()
        
        print(f"‚úÖ Configuraci√≥n escalable creada")
        print(f"   üì¶ Productos simples: {len(config_escalable.base_datos.get('productos_simples', []))}")
        print(f"   üì¶ Productos multi: {len(config_escalable.base_datos.get('productos_multi', []))}")
        print(f"   üìÇ Categor√≠as: {config_escalable.base_datos.get('categorias', [])}")
        
        # Probar b√∫squeda escalable directa
        print(f"\nüîç Probando b√∫squeda escalable directa:")
        
        consultas = ["dulce", "picante", "coca"]
        for consulta in consultas:
            resultados = config_escalable.simulador.config_escalable.buscar_productos_inteligente(consulta, limite=3)
            print(f"   '{consulta}': {len(resultados)} resultados")
            for r in resultados[:2]:
                print(f"      ‚Ä¢ {r['nombre']} - ${r['precio']}")
                
    except Exception as e:
        print(f"‚ùå Error con configuraci√≥n escalable: {e}")
        import traceback
        traceback.print_exc()

def verificar_motor_recomendaciones():
    """Verificar que el motor de recomendaciones est√© usando el sistema correcto"""
    print(f"\n\nüß™ VERIFICANDO MOTOR DE RECOMENDACIONES")
    print("=" * 60)
    
    configuracion = ConfiguracionLYNX()
    
    # Verificar tipo de simulador
    print(f"Tipo de simulador: {type(configuracion.simulador).__name__}")
    print(f"Usar escalable: {getattr(configuracion.simulador, 'usar_escalable', 'N/A')}")
    
    # Verificar estad√≠sticas
    try:
        stats = configuracion.simulador.obtener_estadisticas()
        print(f"Tipo de arquitectura: {stats.get('tipo', 'N/A')}")
        print(f"Productos totales: {stats.get('productos', {}).get('total', 'N/A')}")
    except:
        print("No se pudieron obtener estad√≠sticas")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTS DE RECOMENDACIONES")
    print("=" * 80)
    
    # 1. Test b√∫squedas directas
    test_busquedas_directas()
    
    # 2. Test analizador l√©xico  
    test_analizador_lexico()
    
    # 3. Test configuraci√≥n escalable
    test_configuracion_escalable()
    
    # 4. Verificar motor
    verificar_motor_recomendaciones()
    
    print(f"\n‚úÖ TESTS COMPLETADOS")
