# Dockerfile simplificado para Railway - Single Stage
FROM node:18-alpine

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache python3 py3-pip python3-dev gcc g++ musl-dev

# Copiar archivos del proyecto
COPY . .

# Build del frontend dentro del mismo contenedor
WORKDIR /app/cliente
RUN npm install --no-audit --no-fund
ENV NODE_OPTIONS=--max-old-space-size=1024
RUN npm run build

# Volver al directorio principal e instalar backend
WORKDIR /app
RUN npm ci --production --prefix backed

# Instalar dependencias Python bÃ¡sicas
RUN pip3 install --no-cache-dir --break-system-packages fastapi uvicorn python-dotenv pymysql pandas numpy scikit-learn pydantic requests nltk unidecode mysql-connector-python python-multipart

# Mover el build del frontend
RUN cp -r cliente/dist/* backed/public/ 2>/dev/null || mkdir -p backed/public && cp -r cliente/dist/* backed/public/

# Crear script de inicio simplificado
RUN echo '#!/bin/sh\n\
set -e\n\
echo "ðŸš€ Starting LynxWeb..."\n\
cd /app/backed\n\
# Iniciar microservicios en background\n\
cd /app/services/recommender && uvicorn main:app --host 0.0.0.0 --port 8000 &\n\
cd /app/AnalizadorNPLLynx/AnalizadorLynx-main/api && uvicorn main_lcln_dynamic:app --host 0.0.0.0 --port 8005 &\n\
sleep 5\n\
cd /app/backed\n\
exec node index.js' > /app/start.sh

RUN chmod +x /app/start.sh

EXPOSE 5000

ENV NODE_ENV=production
ENV RECOMMENDER_SERVICE_URL=http://localhost:8000
ENV NLP_SERVICE_URL=http://localhost:8005

CMD ["/app/start.sh"]
